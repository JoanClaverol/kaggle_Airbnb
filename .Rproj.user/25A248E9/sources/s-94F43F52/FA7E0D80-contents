---
title: "Exploration"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
```

# Data description 

The 'listings' file contains all the advertisements in Amsterdam on December 6th, 2018 (20k). The listings_details file contains additional variables. The calendar has 365 records for each listing. It specifies the whether the listing is available on a particular day (365 days ahead), and the price on that day. In addition, a reviews file is available, and I have also included a shapefile of the neighbourhoods in Amsterdam.

# Define goal

The goal of this report is to evaluate an analysis to predict the price of an Airbnb. I will follow three steps to accomplish this goal:

* Descriptive analysis 
* Predictive analysis
* Prescriptive analyisis

First we will start by loading the data and finding out which are the maing factors affecting the price.

## Extra goals

Based on data from [**New York Airbnb Open Data**](https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data):

* What can we learn about different hosts and areas?
* What can we learn from predictions? (ex: locations, prices, reviews, etc)
* Which hosts are the busiest and why?
* Is there any noticeable difference of traffic among different areas and what could be the reason for it?

# Load the data

```{r libraries and data loading}
# libraries
if (require(pacman) == FALSE) {
  install.packages("pacman")
}
pacman::p_load(tidyverse, lubridate, highcharter)
# load data
listing_det <- read_csv(
  "../data/raw_data/listings_details.csv",
  col_types = cols())
calendar <- read_csv("../data/raw_data/calendar.csv",
                     col_types = cols())
```

# Cleaning process

## Data quality

Do I have the same amount of apartments in the calendar data than in the listing_detailed?

```{r}
# unique ids in the calendar data
unique_ids_cal <- calendar %>%
  distinct(listing_id) %>% 
  count()
# unique ids in the listing data
unique_ids_listing <- listing_det %>% 
  distinct(id) %>% 
  count()
```

We have `r unique_ids_cal[[1]]` in calendar data and `r unique_ids_listing` in listing ids. 

Answer, yes, we have it. we can keep on working on the analysis. 

## Dataset related to time

Time to create a data with the information that could be relevant to create a basic linear model, in relation to time. 

```{r}
# define relevant variables in listing detailed
df_details <- listing_det %>%
  select(
    # ids
    listing_id = id,
    # select the variables related to apartments
    property_type, room_type, accommodates,
    # geolocalisation
    neighbourhood, neighborhood_overview, 
    # price relation
    price, weekly_price, security_deposit, cleaning_fee, minimum_nights,
    # reviews
    number_of_reviews,
    ) %>% 
  # parse the price to numeric values
  mutate_at(
    .vars = vars(ends_with("price"), security_deposit, cleaning_fee),
    ~ parse_number(.))

df_cal <- calendar %>% 
  # transform price to right variable
  mutate(price_cal = parse_number(price),
         week_day = wday(date, week_start = 1, label = T)) %>% 
  select(-price) %>% 
  # join the information
  right_join(y = df_details, by = "listing_id") 
```

This new datasat contains information about every flat on the data, from `r min(df_cal$date)` to `r max(df_cal$date)`. 

|The type of property: | Localisation: | Price:                    | Reviews:        | 
| :------------------- | :------------ | :------------------------ | :-------------- |
| Property_type        | Neighbourhood | Price                     | Number of review|
| Room_type            |               | Weekly_price              | Security_deposit|
| Accommodates         |               | Cleaning_fee              | Cleaning_fee    |
|                      |               | Minimum_nights            |                 |

Let's see the price evolution through time:

```{r}
# fitler the informatio in relation to availability, and when there is an error
df_differences <- df_cal %>% 
  filter(available == TRUE) %>% 
  mutate(error = price - price_cal) %>% 
  filter(error != 0) 

# check if there is any relation with time
df_differences %>% 
  group_by(date) %>% 
  summarise(mean_price_cal = mean(price_cal)) %>% 
  ggplot(aes(x = date, y = mean_price_cal)) +
    geom_line(color = "dodgerblue4", alpha = 0.5) +
    geom_smooth(se = F, color = "dodgerblue4") +
    geom_point(aes(y = if_else(abs(mean_price_cal) >= 230, mean_price_cal, NULL)), 
               color = "red") +
    geom_text(aes(label = if_else(abs(mean_price_cal) >= 252, date, NULL)),
              color = "red", hjust = -0.1) + 
    labs(title = "Price evolution through 2018",
         subtitle = "In red, prices equal or higher than 230$",
         caption = "Airbnb listings in Amsterdam on December 6th, 2018") +
    ylab(label = "Mean price by date") +
    theme_minimal() +
    theme(
      axis.title.x = element_blank(),
      legend.position = "none"
    )
```

Relevant insights:

* Peak detections in the read points, specially on dates like *new year* and 


We have differnt room types inside the data. That would be a relevant factor to predict the price:

```{r}
df_differences %>% 
  group_by(date, room_type) %>% 
  summarise(mean_price_cal = round(mean(price_cal),2)) %>% 
  hchart("line", hcaes(x = date, y = mean_price_cal, group = room_type)) %>% 
  hc_colors(c("#CC0000","#333399","#006600")) %>% 
  hc_title(text = "Room type, price evolution through 2018") %>% 
  hc_xAxis(title = list(text = NULL)) %>% 
  hc_yAxis(title = list(text = "Mean price by date")) %>%  
  hc_legend(verticalAlign = "top") 
```

After we split the information in the different room types:

* All of them the suffer a rise in price in new year celebration
* The have a weekly seasonality, as probably the prices goes down for the week, and goes up in weekends
* 

# Exploring the prices in relation to time



# Exploring listing details dataset

## Price analyisis

Starting by the price column, understanding it as by night:

```{r}
df_price <- listing_det %>% 
  # price transformation to numeric
  mutate_at(.vars = vars(ends_with("price"), security_deposit, cleaning_fee),
            ~ parse_number(.)) %>%
  # creattion new feature
  mutate(minimum_price = minimum_nights * price)
```

## Identify relevant clusters

How many room types do we have and which are the bigger ones?

```{r}
listing_det %>% group_by(room_type) %>% count()
```

### Price distribution

```{r}
df_price %>% 
  filter(price < 500) %>% 
  ggplot() +
    geom_histogram(aes(x = price), bins = 200)
```


## Understand price in relation to time

```{r}
# localize the data can provide us price in relation to time
calendar <- read_csv("../data/raw_data/calendar.csv", col_types = cols())
# parsing information to numeric
df_calendar <- calendar %>% 
  mutate(price = parse_number(price)) %>%
  group_by(date) %>% 
  summarise(mean = mean(price, na.rm = T),
            median = median(price, na.rm = T)) 

df_calendar %>% 
  ggplot(aes(x = date)) + 
    geom_line(aes(y = mean), color = "darkgreen") +
    geom_line(aes(y = median), color = "red")
```

We can clearly see an peak in January, unkown source. And it seems there is a specific seasonality in relation to each day. We are goinig to check this theory

```{r}
df_calendar %>% 
  mutate(week_day = wday(date, week_start = 1, label = T)) %>% 
  ggplot(aes(x = week_day, y = mean)) +
    geom_boxplot()
```

Can I create a linear model based on all the information that I should consider relevant?




In order to evaluate the effect of the week day into the price, we will have to split the information into the type of appartments and also neighbourhood.  

## Find relation between type of apartement and price

```{r}
df_price %>% 
  select(listing_id = id, room_type, city) %>% 
  right_join(y = calendar, by = "listing_id") %>% 
  mutate(price = parse_number(price)) %>%
  filter(room_type %in% c("Private room","Entire home/apt")) %>% 
  group_by(date, city, room_type) %>% 
  summarise(mean = mean(price, na.rm = T)) %>% 
  ggplot(aes(x = date, y = mean, color = city)) +
    geom_line() +
    facet_wrap(~room_type) -> p1
plotly::ggplotly(p1)
```


# Ideas 

* Seasonality effect
